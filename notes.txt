# Install MQTT and iPOPO

$ sudo yum install mosquitto
$ sudo apt-get install mosquitto

$ sudo pip install paho-mqtt
$ git clone https://github.com/tcalmant/ipopo.git
$ cd ipopo
$ sudo python setup.py develop

# Shutdown the firewall !!!
$ sudo iptables -F


# Delete the conf/ folder (if present) before starting the frameworks, to
# avoid errors

# Run two frameworks, starting main.py in two different terminals.
# It is recommended to use different working directories to avoid messing with
# ConfigurationAdmin

# ---------- Event Admin ----------

# Create an MQTT connection, using ConfigurationAdmin
$ config.create mqtt.connector host=test.mosquitto.org
New configuration: mqtt.connector-3c3d82ac-1b8b-45df-9453-399211a4412d

# Install the event printer
$ install event.printer
Bundle ID: 20
$ start 20

# Instantiate one
$ instantiate event-printer printer event.topics=toto/*config.create mqtt.connector host=test.mosquitto.org
INFO:event.printer:>> EventPrinter validated with topic filter: toto/*
Component 'printer' instantiated.

# Test it (local event)
$ send toto/titi answer=42
INFO:event.printer:Received an event: toto/titi
{'answer': '42',
 'event.sender.framework.uid': '09ed6ac9-6cf6-486b-9a73-7187ee2152e8',
 'event.timestamp': 1389365704.421446}

# Allow event propagation
$ send toto/titi answer=42 event.propagate=True
INFO:event.printer:Received an event: toto/titi
{'answer': '42',
 'event.propagate': 'True',
 'event.sender.framework.uid': '09ed6ac9-6cf6-486b-9a73-7187ee2152e8',
 'event.timestamp': 1389365753.304372}

#=> Event is received on second framework:
INFO:event.printer:Received an event: toto/titi
{u'answer': u'42',
 u'event.propagate': u'True',
 u'event.sender.framework.uid': '8793fc5e-cf7c-47fa-a9e6-7c966de67bf8',
 u'event.timestamp': 1389365938.059953,
 'pelix.eventadmin.mqtt.source': '09ed6ac9-6cf6-486b-9a73-7187ee2152e8'}


# ---------- Remote Services ----------

# In a terminal:
$ install rs.executor
Bundle ID: 21
$ start 21
INFO:rs.executor:>> Executor validated

# In the other:
$ install rs.commander
Bundle ID: 21
$ start 21
INFO:rs.commander:>> Commander validated

#=> The commander is validated has soon as an executor service is discovered
# using the multicast protocol

$ help demo
=== Name space 'demo' ===
- say [<property=value> ...] ...
        say(*words) - Logs the given text
$ say Hello Toto

#=> The shell command 'say', provided by the commander calls the say() method
# in the other framework, using JSON-RPC, where we can see:
INFO:rs.executor:Hello Toto

# ---------- MQTT ----------

# In a terminal:
$ install mqtt.client
Bundle ID: 22
$ start 22
$ instantiate mqtt.client mqtt-client pelix.mqtt.topics=titi/\#
Component 'mqtt-client' instantiated.

# In the other:
$ install mqtt.sender
Bundle ID: 22
$ start 22
INFO:mqtt.sender:>> MqttSender validated
$ pub titi/toto Hello, from the other side

#=> Pub simply constructs a string with the given words, the first terminal will
# print:
INFO:mqtt.client:Got MQTT message: topic=titi/toto; qos=0;
Hello, from the other side

# Another method is pub_json:
$ demo.pub_json titi/test22/toto answer=42 temperature=10

# => in the other terminal:
INFO:mqtt.client:Got MQTT message: topic=titi/test22/toto; qos=0;
{"answer": "42", "temperature": "10"}
